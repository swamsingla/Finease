import React from 'react';
import { 
  View, 
  Text, 
  TextInput, 
  ScrollView, 
  TouchableOpacity, 
  StyleSheet,
  Switch
} from 'react-native';
import DateTimePicker from '@react-native-community/datetimepicker';
import { Picker } from '@react-native-picker/picker';

export default function EWayBillForm({ formData, setFormData, onGenerate }) {
  const [showValidFromDate, setShowValidFromDate] = React.useState(false);

  const handleInputChange = (value, name) => {
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleValidFromChange = (event, selectedDate) => {
    setShowValidFromDate(false);
    if (selectedDate) {
      const validFrom = selectedDate.toISOString();
      const validFromDate = new Date(selectedDate);
      const validUntilDate = new Date(validFromDate);
      validUntilDate.setMonth(validUntilDate.getMonth() + 3);
      
      setFormData(prev => ({
        ...prev,
        validFrom,
        validUntil: validUntilDate.toISOString()
      }));
    }
  };

  const handleAddVehicle = () => {
    setFormData(prev => ({
      ...prev,
      vehicles: [...prev.vehicles, {
        mode: "Road",
        vehicleNo: "",
        from: "",
        enteredDate: new Date().toISOString(),
        enteredBy: ""
      }]
    }));
  };

  const handleRemoveVehicle = (index) => {
    setFormData(prev => ({
      ...prev,
      vehicles: prev.vehicles.filter((_, idx) => idx !== index)
    }));
  };

  const handleVehicleChange = (index, field, value) => {
    setFormData(prev => {
      const newVehicles = [...prev.vehicles];
      newVehicles[index] = {
        ...newVehicles[index],
        [field]: value
      };
      return {
        ...prev,
        vehicles: newVehicles
      };
    });
  };

  const [showEnteredDate, setShowEnteredDate] = React.useState({});

  const handleEnteredDateChange = (index, event, selectedDate) => {
    setShowEnteredDate({...showEnteredDate, [index]: false});
    if (selectedDate) {
      handleVehicleChange(index, 'enteredDate', selectedDate.toISOString());
    }
  };

  // Format dates for display
  const formatDate = (dateString) => {
    if (!dateString) return "";
    try {
      const date = new Date(dateString);
      return date.toLocaleString();
    } catch (e) {
      return dateString;
    }
  };

  return (
    <ScrollView style={styles.container}>
      {/* Part A - Basic Details */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Part A - Basic Details</Text>
        <View style={styles.gridContainer}>
          <View style={styles.gridItem}>
            <Text style={styles.label}>Generated By:</Text>
            <TextInput
              style={styles.input}
              value={formData.generatedBy}
              onChangeText={(text) => handleInputChange(text, 'generatedBy')}
            />
          </View>
          <View style={styles.gridItem}>
            <Text style={styles.label}>Valid From:</Text>
            <TouchableOpacity 
              style={styles.dateInput}
              onPress={() => setShowValidFromDate(true)}
            >
              <Text>{formData.validFrom ? formatDate(formData.validFrom) : "Select Date & Time"}</Text>
            </TouchableOpacity>
            {showValidFromDate && (
              <DateTimePicker
                value={formData.validFrom ? new Date(formData.validFrom) : new Date()}
                mode="datetime"
                display="default"
                onChange={handleValidFromChange}
              />
            )}
          </View>
          <View style={styles.gridItem}>
            <Text style={styles.label}>Valid Until:</Text>
            <TextInput
              style={[styles.input, styles.readOnlyInput]}
              value={formData.validUntil ? formatDate(formData.validUntil) : ""}
              editable={false}
            />
          </View>
          <View style={styles.gridItem}>
            <Text style={styles.label}>GSTIN of Supplier:</Text>
            <TextInput
              style={styles.input}
              value={formData.supplierGstin}
              onChangeText={(text) => handleInputChange(text, 'supplierGstin')}
              autoCapitalize="characters"
            />
          </View>
          <View style={styles.gridItem}>
            <Text style={styles.label}>GSTIN of Recipient:</Text>
            <TextInput
              style={styles.input}
              value={formData.recipientGstin}
              onChangeText={(text) => handleInputChange(text, 'recipientGstin')}
              autoCapitalize="characters"
            />
          </View>
          <View style={styles.gridItem}>
            <Text style={styles.label}>Place of Delivery:</Text>
            <TextInput
              style={styles.input}
              value={formData.placeOfDelivery}
              onChangeText={(text) => handleInputChange(text, 'placeOfDelivery')}
            />
          </View>
          <View style={styles.gridItem}>
            <Text style={styles.label}>Place of Dispatch:</Text>
            <TextInput
              style={styles.input}
              value={formData.placeOfDispatch}
              onChangeText={(text) => handleInputChange(text, 'placeOfDispatch')}
            />
          </View>
          <View style={styles.gridItem}>
            <Text style={styles.label}>Value of Goods:</Text>
            <TextInput
              style={styles.input}
              value={formData.valueOfGoods}
              onChangeText={(text) => handleInputChange(text, 'valueOfGoods')}
              keyboardType="numeric"
            />
          </View>
          <View style={styles.gridItem}>
            <Text style={styles.label}>Reason for Transportation:</Text>
            <View style={styles.pickerContainer}>
              <Picker
                selectedValue={formData.transportReason}
                onValueChange={(value) => handleInputChange(value, 'transportReason')}
                style={styles.picker}
              >
                <Picker.Item label="Supply" value="Supply" />
                <Picker.Item label="Export" value="Export" />
                <Picker.Item label="Job Work" value="Job Work" />
                <Picker.Item label="Others" value="Others" />
              </Picker>
            </View>
          </View>
          <View style={styles.gridItem}>
            <Text style={styles.label}>Transporter:</Text>
            <TextInput
              style={styles.input}
              value={formData.transporter}
              onChangeText={(text) => handleInputChange(text, 'transporter')}
            />
          </View>
        </View>
      </View>

      {/* Part B - Vehicle Details */}
      <View style={styles.section}>
        <View style={styles.sectionHeader}>
          <Text style={styles.sectionTitle}>Part B - Vehicle Details</Text>
          <TouchableOpacity
            style={styles.addButton}
            onPress={handleAddVehicle}
          >
            <Text style={styles.addButtonText}>Add Vehicle</Text>
          </TouchableOpacity>
        </View>

        {formData.vehicles.map((vehicle, idx) => (
          <View key={idx} style={styles.vehicleContainer}>
            <View style={styles.vehicleHeader}>
              <Text style={styles.vehicleTitle}>Vehicle #{idx + 1}</Text>
              {formData.vehicles.length > 1 && (
                <TouchableOpacity
                  onPress={() => handleRemoveVehicle(idx)}
                >
                  <Text style={styles.removeButton}>Remove</Text>
                </TouchableOpacity>
              )}
            </View>

            <View style={styles.gridContainer}>
              <View style={styles.gridItem}>
                <Text style={styles.label}>Mode:</Text>
                <View style={styles.pickerContainer}>
                  <Picker
                    selectedValue={vehicle.mode}
                    onValueChange={(value) => handleVehicleChange(idx, 'mode', value)}
                    style={styles.picker}
                  >
                    <Picker.Item label="Road" value="Road" />
                    <Picker.Item label="Rail" value="Rail" />
                    <Picker.Item label="Air" value="Air" />
                    <Picker.Item label="Ship" value="Ship" />
                  </Picker>
                </View>
              </View>
              <View style={styles.gridItem}>
                <Text style={styles.label}>Vehicle No:</Text>
                <TextInput
                  style={styles.input}
                  value={vehicle.vehicleNo}
                  onChangeText={(text) => handleVehicleChange(idx, 'vehicleNo', text)}
                />
              </View>
              <View style={styles.gridItem}>
                <Text style={styles.label}>From:</Text>
                <TextInput
                  style={styles.input}
                  value={vehicle.from}
                  onChangeText={(text) => handleVehicleChange(idx, 'from', text)}
                />
              </View>
              <View style={styles.gridItem}>
                <Text style={styles.label}>Entered Date:</Text>
                <TouchableOpacity 
                  style={styles.dateInput}
                  onPress={() => setShowEnteredDate({...showEnteredDate, [idx]: true})}
                >
                  <Text>{vehicle.enteredDate ? formatDate(vehicle.enteredDate) : "Select Date & Time"}</Text>
                </TouchableOpacity>
                {showEnteredDate[idx] && (
                  <DateTimePicker
                    value={vehicle.enteredDate ? new Date(vehicle.enteredDate) : new Date()}
                    mode="datetime"
                    display="default"
                    onChange={(event, date) => handleEnteredDateChange(idx, event, date)}
                  />
                )}
              </View>
              <View style={styles.gridItem}>
                <Text style={styles.label}>Entered By:</Text>
                <TextInput
                  style={styles.input}
                  value={vehicle.enteredBy}
                  onChangeText={(text) => handleVehicleChange(idx, 'enteredBy', text)}
                />
              </View>
            </View>
          </View>
        ))}
      </View>

      <TouchableOpacity
        style={styles.generateButton}
        onPress={onGenerate}
      >
        <Text style={styles.generateButtonText}>Generate E-Way Bill</Text>
      </TouchableOpacity>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
  },
  section: {
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    padding: 16,
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 16,
  },
  formGroup: {
    marginBottom: 12,
  },
  label: {
    fontWeight: '600',
    marginBottom: 4,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 4,
    padding: 8,
  },
  dateInput: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 4,
    padding: 10,
    backgroundColor: '#fff',
  },
  readOnlyInput: {
    backgroundColor: '#f0f0f0',
  },
  gridContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginHorizontal: -6,
  },
  gridItem: {
    width: '50%',
    paddingHorizontal: 6,
    marginBottom: 12,
  },
  vehicleContainer: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    padding: 12,
    marginBottom: 12,
  },
  vehicleHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  vehicleTitle: {
    fontWeight: '600',
  },
  removeButton: {
    color: 'red',
  },
  addButton: {
    backgroundColor: '#4caf50',
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 4,
  },
  addButtonText: {
    color: 'white',
    fontWeight: '600',
  },
  generateButton: {
    backgroundColor: '#2196f3',
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 4,
    marginVertical: 20,
    alignItems: 'center',
  },
  generateButtonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 16,
  },
  pickerContainer: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 4,
    overflow: 'hidden',
  },
  picker: {
    height: 40,
    width: '100%',
  },
});